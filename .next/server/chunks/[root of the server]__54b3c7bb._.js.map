{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://G%3A/english-word-learning-app/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined\r\n}\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  globalForPrisma.prisma = prisma\r\n}\r\n\r\n// 获取用户今日学习统计\r\nexport async function getTodayStats(userId: number) {\r\n  const today = new Date()\r\n  today.setHours(0, 0, 0, 0)\r\n\r\n  return prisma.dailyStat.findUnique({\r\n    where: {\r\n      userId_date: {\r\n        userId,\r\n        date: today\r\n      }\r\n    }\r\n  })\r\n} "],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B;AAGO,eAAe,cAAc,MAAc;IAChD,MAAM,QAAQ,IAAI;IAClB,MAAM,QAAQ,CAAC,GAAG,GAAG,GAAG;IAExB,OAAO,OAAO,SAAS,CAAC,UAAU,CAAC;QACjC,OAAO;YACL,aAAa;gBACX;gBACA,MAAM;YACR;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file://G%3A/english-word-learning-app/src/lib/auth.ts"],"sourcesContent":["import { NextRequest } from 'next/server'\r\nimport jwt from 'jsonwebtoken'\r\n\r\ninterface TokenPayload {\r\n  userId: number\r\n}\r\n\r\nexport async function getToken(request: NextRequest): Promise<TokenPayload | null> {\r\n  try {\r\n    const token = request.cookies.get('token')?.value\r\n    if (!token) return null\r\n\r\n    const secret = process.env.JWT_SECRET\r\n    if (!secret) {\r\n      console.error('JWT_SECRET 未设置')\r\n      return null\r\n    }\r\n\r\n    const decoded = jwt.verify(token, secret) as TokenPayload\r\n    return decoded\r\n  } catch (error) {\r\n    console.error('Token 验证失败:', error)\r\n    return null\r\n  }\r\n} "],"names":[],"mappings":";;;AACA;;AAMO,eAAe,SAAS,OAAoB;IACjD,IAAI;QACF,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,UAAU;QAC5C,IAAI,CAAC,OAAO,OAAO;QAEnB,MAAM,SAAS,QAAQ,GAAG,CAAC,UAAU;QACrC,IAAI,CAAC,QAAQ;YACX,QAAQ,KAAK,CAAC;YACd,OAAO;QACT;QAEA,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAClC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,eAAe;QAC7B,OAAO;IACT;AACF","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file://G%3A/english-word-learning-app/src/app/api/profile/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport { prisma } from '@/lib/prisma'\r\nimport { getToken } from '@/lib/auth'\r\n\r\nexport async function GET(request: Request) {\r\n  try {\r\n    const token = await getToken(request)\r\n    if (!token) {\r\n      return NextResponse.json({ error: '未授权' }, { status: 401 })\r\n    }\r\n\r\n    // 获取用户信息\r\n    const user = await prisma.user.findUnique({\r\n      where: { id: token.userId },\r\n      select: {\r\n        username: true,\r\n        email: true,\r\n        points: true,\r\n        streakDays: true\r\n      }\r\n    })\r\n\r\n    if (!user) {\r\n      return NextResponse.json({ error: '用户不存在' }, { status: 404 })\r\n    }\r\n\r\n    // 获取学习统计\r\n    const stats = await prisma.dailyStat.aggregate({\r\n      where: { userId: token.userId },\r\n      _sum: {\r\n        wordsLearned: true,\r\n        studyTime: true\r\n      },\r\n      _avg: {\r\n        accuracy: true\r\n      }\r\n    })\r\n\r\n    // 获取已学单词总数\r\n    const totalWords = await prisma.learningRecord.count({\r\n      where: {\r\n        userId: token.userId,\r\n        status: 'LEARNED'\r\n      }\r\n    })\r\n\r\n    return NextResponse.json({\r\n      ...user,\r\n      totalWords,\r\n      totalStudyTime: stats._sum.studyTime || 0,\r\n      accuracy: (stats._avg.accuracy || 0) * 100\r\n    })\r\n  } catch (error) {\r\n    console.error('获取用户信息失败:', error)\r\n    return NextResponse.json(\r\n      { error: '获取用户信息失败' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,QAAQ,MAAM,CAAA,GAAA,oHAAA,CAAA,WAAQ,AAAD,EAAE;QAC7B,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAM,GAAG;gBAAE,QAAQ;YAAI;QAC3D;QAEA,SAAS;QACT,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE,IAAI,MAAM,MAAM;YAAC;YAC1B,QAAQ;gBACN,UAAU;gBACV,OAAO;gBACP,QAAQ;gBACR,YAAY;YACd;QACF;QAEA,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAQ,GAAG;gBAAE,QAAQ;YAAI;QAC7D;QAEA,SAAS;QACT,MAAM,QAAQ,MAAM,sHAAA,CAAA,SAAM,CAAC,SAAS,CAAC,SAAS,CAAC;YAC7C,OAAO;gBAAE,QAAQ,MAAM,MAAM;YAAC;YAC9B,MAAM;gBACJ,cAAc;gBACd,WAAW;YACb;YACA,MAAM;gBACJ,UAAU;YACZ;QACF;QAEA,WAAW;QACX,MAAM,aAAa,MAAM,sHAAA,CAAA,SAAM,CAAC,cAAc,CAAC,KAAK,CAAC;YACnD,OAAO;gBACL,QAAQ,MAAM,MAAM;gBACpB,QAAQ;YACV;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,GAAG,IAAI;YACP;YACA,gBAAgB,MAAM,IAAI,CAAC,SAAS,IAAI;YACxC,UAAU,CAAC,MAAM,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI;QACzC;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,aAAa;QAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAW,GACpB;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}