{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://G%3A/english-word-learning-app/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined\r\n}\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  globalForPrisma.prisma = prisma\r\n} "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C;IACzC,gBAAgB,MAAM,GAAG;AAC3B","debugId":null}},
    {"offset": {"line": 116, "column": 0}, "map": {"version":3,"sources":["file://G%3A/english-word-learning-app/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport { prisma } from '@/lib/prisma'\r\nimport bcrypt from 'bcryptjs'\r\nimport jwt from 'jsonwebtoken'\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    // 检查环境变量\r\n    if (!process.env.JWT_SECRET) {\r\n      console.error('JWT_SECRET 未设置');\r\n      return NextResponse.json({ error: '服务器配置错误' }, { status: 500 });\r\n    }\r\n\r\n    // 解析请求体\r\n    let body;\r\n    try {\r\n      body = await request.json();\r\n    } catch (error) {\r\n      console.error('解析请求体失败:', error);\r\n      return NextResponse.json({ error: '无效的请求格式' }, { status: 400 });\r\n    }\r\n\r\n    const { email, password } = body;\r\n    console.log('登录请求:', email);\r\n\r\n    // 验证用户\r\n    const user = await prisma.user.findUnique({\r\n      where: { email }\r\n    });\r\n\r\n    if (!user) {\r\n      console.log('用户不存在');\r\n      return NextResponse.json({ error: '邮箱或密码错误' }, { status: 401 });\r\n    }\r\n\r\n    const isValid = await bcrypt.compare(password, user.passwordHash);\r\n    if (!isValid) {\r\n      console.log('密码错误');\r\n      return NextResponse.json({ error: '邮箱或密码错误' }, { status: 401 });\r\n    }\r\n\r\n    // 生成 JWT token\r\n    const token = jwt.sign(\r\n      { userId: user.id },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: '7d' }\r\n    );\r\n\r\n    // 创建响应\r\n    const response = NextResponse.json(\r\n      { \r\n        user: { \r\n          id: user.id, \r\n          email: user.email, \r\n          username: user.username \r\n        } \r\n      },\r\n      { status: 200 }\r\n    );\r\n\r\n    // 设置 cookie\r\n    response.cookies.set({\r\n      name: 'token',\r\n      value: token,\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === 'production',\r\n      sameSite: 'strict',\r\n      maxAge: 60 * 60 * 24 * 7 // 7天\r\n    });\r\n\r\n    console.log('登录成功，设置 cookie');\r\n    return response;\r\n  } catch (error) {\r\n    console.error('登录错误:', error);\r\n    return NextResponse.json({ error: '登录失败' }, { status: 500 });\r\n  }\r\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,SAAS;QACT,IAAI,CAAC,QAAQ,GAAG,CAAC,UAAU,EAAE;YAC3B,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAU,GAAG;gBAAE,QAAQ;YAAI;QAC/D;QAEA,QAAQ;QACR,IAAI;QACJ,IAAI;YACF,OAAO,MAAM,QAAQ,IAAI;QAC3B,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,YAAY;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAU,GAAG;gBAAE,QAAQ;YAAI;QAC/D;QAEA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;QAC5B,QAAQ,GAAG,CAAC,SAAS;QAErB,OAAO;QACP,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,CAAC,MAAM;YACT,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAU,GAAG;gBAAE,QAAQ;YAAI;QAC/D;QAEA,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,YAAY;QAChE,IAAI,CAAC,SAAS;YACZ,QAAQ,GAAG,CAAC;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAU,GAAG;gBAAE,QAAQ;YAAI;QAC/D;QAEA,eAAe;QACf,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CACpB;YAAE,QAAQ,KAAK,EAAE;QAAC,GAClB,QAAQ,GAAG,CAAC,UAAU,EACtB;YAAE,WAAW;QAAK;QAGpB,OAAO;QACP,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAChC;YACE,MAAM;gBACJ,IAAI,KAAK,EAAE;gBACX,OAAO,KAAK,KAAK;gBACjB,UAAU,KAAK,QAAQ;YACzB;QACF,GACA;YAAE,QAAQ;QAAI;QAGhB,YAAY;QACZ,SAAS,OAAO,CAAC,GAAG,CAAC;YACnB,MAAM;YACN,OAAO;YACP,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;YACV,QAAQ,KAAK,KAAK,KAAK,EAAE,KAAK;QAChC;QAEA,QAAQ,GAAG,CAAC;QACZ,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,SAAS;QACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAO,GAAG;YAAE,QAAQ;QAAI;IAC5D;AACF","debugId":null}}]
}