{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport type { NextRequest } from 'next/server'\r\n\r\n// 公开路由列表\r\nconst publicRoutes = [\r\n  '/login',\r\n  '/register',\r\n  '/api/auth/login',\r\n  '/api/auth/register'\r\n]\r\n\r\n// 简单的 token 验证函数\r\nfunction verifyToken(token: string, secret: string): boolean {\r\n  try {\r\n    // 简单的 token 格式验证\r\n    const parts = token.split('.')\r\n    if (parts.length !== 3) return false\r\n    \r\n    // 检查 token 是否过期\r\n    const payload = JSON.parse(atob(parts[1]))\r\n    const now = Math.floor(Date.now() / 1000)\r\n    if (payload.exp && payload.exp < now) return false\r\n    \r\n    return true\r\n  } catch (error) {\r\n    console.error('Token 验证失败:', error)\r\n    return false\r\n  }\r\n}\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  const path = request.nextUrl.pathname\r\n  console.log('中间件被触发')\r\n  console.log('当前路径:', path)\r\n  console.log('请求方法:', request.method)\r\n\r\n  // 检查是否是公开路由\r\n  if (publicRoutes.includes(path)) {\r\n    console.log('公开路由，直接放行:', path)\r\n    return NextResponse.next()\r\n  }\r\n\r\n  // 获取 token\r\n  const token = request.cookies.get('token')?.value\r\n  console.log('检查 token:', token ? '存在' : '不存在')\r\n\r\n  if (!token) {\r\n    console.log('未找到 token，重定向到登录页')\r\n    return NextResponse.redirect(new URL('/login', request.url))\r\n  }\r\n\r\n  try {\r\n    // 验证 token\r\n    const isValid = verifyToken(token, process.env.JWT_SECRET || '')\r\n    if (!isValid) {\r\n      console.log('token 验证失败')\r\n      return NextResponse.redirect(new URL('/login', request.url))\r\n    }\r\n    console.log('token 验证成功')\r\n    return NextResponse.next()\r\n  } catch (error) {\r\n    console.log('token 验证失败:', error)\r\n    return NextResponse.redirect(new URL('/login', request.url))\r\n  }\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    /*\r\n     * 匹配所有路径，除了：\r\n     * - api/auth/login 和 api/auth/register (登录和注册 API)\r\n     * - _next/static (静态文件)\r\n     * - _next/image (图片优化)\r\n     * - favicon.ico (网站图标)\r\n     */\r\n    '/((?!api/auth/login|api/auth/register|_next/static|_next/image|favicon.ico).*)',\r\n  ],\r\n} "],"names":[],"mappings":";;;;AAAA;AAAA;;AAGA,SAAS;AACT,MAAM,eAAe;IACnB;IACA;IACA;IACA;CACD;AAED,iBAAiB;AACjB,SAAS,YAAY,KAAa,EAAE,MAAc;IAChD,IAAI;QACF,iBAAiB;QACjB,MAAM,QAAQ,MAAM,KAAK,CAAC;QAC1B,IAAI,MAAM,MAAM,KAAK,GAAG,OAAO;QAE/B,gBAAgB;QAChB,MAAM,UAAU,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,EAAE;QACxC,MAAM,MAAM,KAAK,KAAK,CAAC,KAAK,GAAG,KAAK;QACpC,IAAI,QAAQ,GAAG,IAAI,QAAQ,GAAG,GAAG,KAAK,OAAO;QAE7C,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,eAAe;QAC7B,OAAO;IACT;AACF;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,OAAO,QAAQ,OAAO,CAAC,QAAQ;IACrC,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,SAAS;IACrB,QAAQ,GAAG,CAAC,SAAS,QAAQ,MAAM;IAEnC,YAAY;IACZ,IAAI,aAAa,QAAQ,CAAC,OAAO;QAC/B,QAAQ,GAAG,CAAC,cAAc;QAC1B,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,WAAW;IACX,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,UAAU;IAC5C,QAAQ,GAAG,CAAC,aAAa,QAAQ,OAAO;IAExC,IAAI,CAAC,OAAO;QACV,QAAQ,GAAG,CAAC;QACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC5D;IAEA,IAAI;QACF,WAAW;QACX,MAAM,UAAU,YAAY,OAAO,QAAQ,GAAG,CAAC,UAAU,IAAI;QAC7D,IAAI,CAAC,SAAS;YACZ,QAAQ,GAAG,CAAC;YACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC5D;QACA,QAAQ,GAAG,CAAC;QACZ,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC,eAAe;QAC3B,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;IAC5D;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;KAMC,GACD;KACD;AACH"}}]
}